{"ast":null,"code":"import{BrowserProvider,Contract,toBigInt}from\"ethers\";import verifierABI from\"../contract/Verifier.json\";// Ensure contract address is correctly set\nconst CONTRACT_ADDRESS=process.env.REACT_APP_CONTRACT_ADDRESS||\"0xYourDeployedContractAddress\";// ✅ Generate Proof Function\nexport const generateProof=async userId=>{// This function should ideally integrate with ZoKrates\n// For now, it's a mock proof\nreturn{proof:{a:[\"0x1\",\"0x2\"],b:[[\"0x3\",\"0x4\"],[\"0x5\",\"0x6\"]],c:[\"0x7\",\"0x8\"]},inputs:[userId]};};// ✅ Verify Proof on Blockchain\nexport const verifyProofOnChain=async proof=>{if(!window.ethereum){alert(\"MetaMask is required!\");return false;}await window.ethereum.request({method:\"eth_requestAccounts\"});const provider=new BrowserProvider(window.ethereum);const signer=await provider.getSigner();if(!CONTRACT_ADDRESS||CONTRACT_ADDRESS===\"0xYourDeployedContractAddress\"){alert(\"⚠️ Contract address is missing! Set REACT_APP_CONTRACT_ADDRESS in .env.\");return false;}const contract=new Contract(CONTRACT_ADDRESS,verifierABI,signer);const{proof:{a,b,c},inputs}=proof;const formattedProof={a:[toBigInt(a[0]),toBigInt(a[1])],b:[[toBigInt(b[0][0]),toBigInt(b[0][1])],[toBigInt(b[1][0]),toBigInt(b[1][1])]],c:[toBigInt(c[0]),toBigInt(c[1])]};const formattedInputs=inputs.map(i=>toBigInt(i));return await contract.verifyTx(formattedProof,formattedInputs);};","map":{"version":3,"names":["BrowserProvider","Contract","toBigInt","verifierABI","CONTRACT_ADDRESS","process","env","REACT_APP_CONTRACT_ADDRESS","generateProof","userId","proof","a","b","c","inputs","verifyProofOnChain","window","ethereum","alert","request","method","provider","signer","getSigner","contract","formattedProof","formattedInputs","map","i","verifyTx"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/utils/generateProof.js"],"sourcesContent":["import { BrowserProvider, Contract, toBigInt } from \"ethers\";\r\nimport verifierABI from \"../contract/Verifier.json\";\r\n\r\n// Ensure contract address is correctly set\r\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || \"0xYourDeployedContractAddress\";\r\n\r\n// ✅ Generate Proof Function\r\nexport const generateProof = async (userId) => {\r\n    // This function should ideally integrate with ZoKrates\r\n    // For now, it's a mock proof\r\n    return {\r\n        proof: {\r\n            a: [\"0x1\", \"0x2\"],\r\n            b: [[\"0x3\", \"0x4\"], [\"0x5\", \"0x6\"]],\r\n            c: [\"0x7\", \"0x8\"]\r\n        },\r\n        inputs: [userId]\r\n    };\r\n};\r\n\r\n// ✅ Verify Proof on Blockchain\r\nexport const verifyProofOnChain = async (proof) => {\r\n    if (!window.ethereum) {\r\n        alert(\"MetaMask is required!\");\r\n        return false;\r\n    }\r\n\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n    const provider = new BrowserProvider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n\r\n    if (!CONTRACT_ADDRESS || CONTRACT_ADDRESS === \"0xYourDeployedContractAddress\") {\r\n        alert(\"⚠️ Contract address is missing! Set REACT_APP_CONTRACT_ADDRESS in .env.\");\r\n        return false;\r\n    }\r\n\r\n    const contract = new Contract(CONTRACT_ADDRESS, verifierABI, signer);\r\n\r\n    const { proof: { a, b, c }, inputs } = proof;\r\n    const formattedProof = {\r\n        a: [toBigInt(a[0]), toBigInt(a[1])],\r\n        b: [\r\n            [toBigInt(b[0][0]), toBigInt(b[0][1])],\r\n            [toBigInt(b[1][0]), toBigInt(b[1][1])]\r\n        ],\r\n        c: [toBigInt(c[0]), toBigInt(c[1])]\r\n    };\r\n    const formattedInputs = inputs.map((i) => toBigInt(i));\r\n\r\n    return await contract.verifyTx(formattedProof, formattedInputs);\r\n};\r\n"],"mappings":"AAAA,OAASA,eAAe,CAAEC,QAAQ,CAAEC,QAAQ,KAAQ,QAAQ,CAC5D,MAAO,CAAAC,WAAW,KAAM,2BAA2B,CAEnD;AACA,KAAM,CAAAC,gBAAgB,CAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B,EAAI,+BAA+B,CAElG;AACA,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAO,CAAAC,MAAM,EAAK,CAC3C;AACA;AACA,MAAO,CACHC,KAAK,CAAE,CACHC,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAC,CACjBC,CAAC,CAAE,CAAC,CAAC,KAAK,CAAE,KAAK,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CAAC,CAAC,CACnCC,CAAC,CAAE,CAAC,KAAK,CAAE,KAAK,CACpB,CAAC,CACDC,MAAM,CAAE,CAACL,MAAM,CACnB,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,kBAAkB,CAAG,KAAO,CAAAL,KAAK,EAAK,CAC/C,GAAI,CAACM,MAAM,CAACC,QAAQ,CAAE,CAClBC,KAAK,CAAC,uBAAuB,CAAC,CAC9B,MAAO,MAAK,CAChB,CAEA,KAAM,CAAAF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC,CAAEC,MAAM,CAAE,qBAAsB,CAAC,CAAC,CAEhE,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAArB,eAAe,CAACgB,MAAM,CAACC,QAAQ,CAAC,CACrD,KAAM,CAAAK,MAAM,CAAG,KAAM,CAAAD,QAAQ,CAACE,SAAS,CAAC,CAAC,CAEzC,GAAI,CAACnB,gBAAgB,EAAIA,gBAAgB,GAAK,+BAA+B,CAAE,CAC3Ec,KAAK,CAAC,yEAAyE,CAAC,CAChF,MAAO,MAAK,CAChB,CAEA,KAAM,CAAAM,QAAQ,CAAG,GAAI,CAAAvB,QAAQ,CAACG,gBAAgB,CAAED,WAAW,CAAEmB,MAAM,CAAC,CAEpE,KAAM,CAAEZ,KAAK,CAAE,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAE,CAAC,CAAEC,MAAO,CAAC,CAAGJ,KAAK,CAC5C,KAAM,CAAAe,cAAc,CAAG,CACnBd,CAAC,CAAE,CAACT,QAAQ,CAACS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAET,QAAQ,CAACS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnCC,CAAC,CAAE,CACC,CAACV,QAAQ,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAEV,QAAQ,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtC,CAACV,QAAQ,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAEV,QAAQ,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzC,CACDC,CAAC,CAAE,CAACX,QAAQ,CAACW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAEX,QAAQ,CAACW,CAAC,CAAC,CAAC,CAAC,CAAC,CACtC,CAAC,CACD,KAAM,CAAAa,eAAe,CAAGZ,MAAM,CAACa,GAAG,CAAEC,CAAC,EAAK1B,QAAQ,CAAC0B,CAAC,CAAC,CAAC,CAEtD,MAAO,MAAM,CAAAJ,QAAQ,CAACK,QAAQ,CAACJ,cAAc,CAAEC,eAAe,CAAC,CACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}