{"ast":null,"code":"var _jsxFileName = \"/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { generateProof } from \"../utils/generateProof\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [employeeId, setEmployeeId] = useState(\"\");\n  const [biometricId, setBiometricId] = useState(\"\");\n  const [proofData, setProofData] = useState(null);\n  const handleRegister = async () => {\n    if (!employeeId && !biometricId) {\n      alert(\"Enter either Employee ID or Biometric ID!\");\n      return;\n    }\n    const userId = employeeId || biometricId;\n    const hashedId = await sha256(userId);\n    const did = `did:pramaan:${hashedId.slice(0, 16)}`;\n    if (localStorage.getItem(userId)) {\n      alert(\"Already registered!\");\n      return;\n    }\n\n    // Generate Proof\n    const proof = await generateProof(hashedId);\n    setProofData(proof);\n    localStorage.setItem(userId, JSON.stringify({\n      did,\n      proof\n    }));\n    alert(\"✅ Successful Registration! Please download your proof.\");\n  };\n  const downloadProof = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([JSON.stringify(proofData, null, 2)], {\n      type: \"application/json\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"proof.json\";\n    document.body.appendChild(element);\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Employee ID\",\n      onChange: e => setEmployeeId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Biometric ID\",\n      onChange: e => setBiometricId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRegister,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), proofData && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadProof,\n      children: \"Download Proof\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"zgtD2C5o6pevHlQxxk/ux5u+ZJ0=\");\n_c = Register;\nconst sha256 = async message => {\n  const msgBuffer = new TextEncoder().encode(message);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer);\n  return Array.from(new Uint8Array(hashBuffer)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n};\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","generateProof","jsxDEV","_jsxDEV","Register","_s","employeeId","setEmployeeId","biometricId","setBiometricId","proofData","setProofData","handleRegister","alert","userId","hashedId","sha256","did","slice","localStorage","getItem","proof","setItem","JSON","stringify","downloadProof","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","e","target","value","onClick","_c","message","msgBuffer","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","$RefreshReg$"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { generateProof } from \"../utils/generateProof\";\r\n\r\nconst Register = () => {\r\n    const [employeeId, setEmployeeId] = useState(\"\");\r\n    const [biometricId, setBiometricId] = useState(\"\");\r\n    const [proofData, setProofData] = useState(null);\r\n\r\n    const handleRegister = async () => {\r\n        if (!employeeId && !biometricId) {\r\n            alert(\"Enter either Employee ID or Biometric ID!\");\r\n            return;\r\n        }\r\n\r\n        const userId = employeeId || biometricId;\r\n        const hashedId = await sha256(userId);\r\n        const did = `did:pramaan:${hashedId.slice(0, 16)}`;\r\n\r\n        if (localStorage.getItem(userId)) {\r\n            alert(\"Already registered!\");\r\n            return;\r\n        }\r\n\r\n        // Generate Proof\r\n        const proof = await generateProof(hashedId);\r\n        setProofData(proof);\r\n\r\n        localStorage.setItem(userId, JSON.stringify({ did, proof }));\r\n        alert(\"✅ Successful Registration! Please download your proof.\");\r\n    };\r\n\r\n    const downloadProof = () => {\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([JSON.stringify(proofData, null, 2)], { type: \"application/json\" });\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"proof.json\";\r\n        document.body.appendChild(element);\r\n        element.click();\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Register</h2>\r\n            <input type=\"text\" placeholder=\"Enter Employee ID\" onChange={(e) => setEmployeeId(e.target.value)} />\r\n            <input type=\"text\" placeholder=\"Enter Biometric ID\" onChange={(e) => setBiometricId(e.target.value)} />\r\n            <button onClick={handleRegister}>Register</button>\r\n            {proofData && <button onClick={downloadProof}>Download Proof</button>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst sha256 = async (message) => {\r\n    const msgBuffer = new TextEncoder().encode(message);\r\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer);\r\n    return Array.from(new Uint8Array(hashBuffer)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}