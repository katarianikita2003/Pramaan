{"ast":null,"code":"var _jsxFileName = \"/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport verifierABI from \"../contract/VerifierABI.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerifyProof = ({\n  proof\n}) => {\n  _s();\n  const [result, setResult] = useState(null);\n  const verifyProofOnChain = async () => {\n    if (!proof) {\n      alert(\"Please upload a proof file first.\");\n      return;\n    }\n    try {\n      // Connect to Polygon Mumbai\n      const provider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_ALCHEMY_RPC_URL);\n      const signer = provider.getSigner();\n\n      // Load the deployed Verifier contract\n      const contract = new ethers.Contract(process.env.REACT_APP_CONTRACT_ADDRESS, verifierABI, signer);\n\n      // Extract proof elements\n      const {\n        proof: {\n          a,\n          b,\n          c\n        },\n        inputs\n      } = proof;\n\n      // Format the proof for Solidity\n      const formattedProof = {\n        a: [ethers.BigNumber.from(a[0]), ethers.BigNumber.from(a[1])],\n        b: [[ethers.BigNumber.from(b[0][0]), ethers.BigNumber.from(b[0][1])], [ethers.BigNumber.from(b[1][0]), ethers.BigNumber.from(b[1][1])]],\n        c: [ethers.BigNumber.from(c[0]), ethers.BigNumber.from(c[1])]\n      };\n      const formattedInputs = inputs.map(i => ethers.BigNumber.from(i));\n\n      // Call the `verifyTx` function\n      const isValid = await contract.verifyTx(formattedProof, formattedInputs);\n      setResult(isValid ? \"✅ Proof is valid!\" : \"❌ Proof verification failed!\");\n    } catch (error) {\n      console.error(error);\n      setResult(\"⚠️ Error occurred during verification.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: verifyProofOnChain,\n      children: \"Verify Proof\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(VerifyProof, \"X4bz0btR6WTE+CkTerVmRyY/5iQ=\");\n_c = VerifyProof;\nexport default VerifyProof;\nvar _c;\n$RefreshReg$(_c, \"VerifyProof\");","map":{"version":3,"names":["React","useState","ethers","verifierABI","jsxDEV","_jsxDEV","VerifyProof","proof","_s","result","setResult","verifyProofOnChain","alert","provider","providers","JsonRpcProvider","process","env","REACT_APP_ALCHEMY_RPC_URL","signer","getSigner","contract","Contract","REACT_APP_CONTRACT_ADDRESS","a","b","c","inputs","formattedProof","BigNumber","from","formattedInputs","map","i","isValid","verifyTx","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport verifierABI from \"../contract/VerifierABI.json\";\r\n\r\nconst VerifyProof = ({ proof }) => {\r\n    const [result, setResult] = useState(null);\r\n\r\n    const verifyProofOnChain = async () => {\r\n        if (!proof) {\r\n            alert(\"Please upload a proof file first.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Connect to Polygon Mumbai\r\n            const provider = new ethers.providers.JsonRpcProvider(process.env.REACT_APP_ALCHEMY_RPC_URL);\r\n            const signer = provider.getSigner();\r\n\r\n            // Load the deployed Verifier contract\r\n            const contract = new ethers.Contract(\r\n                process.env.REACT_APP_CONTRACT_ADDRESS,\r\n                verifierABI,\r\n                signer\r\n            );\r\n\r\n            // Extract proof elements\r\n            const { proof: { a, b, c }, inputs } = proof;\r\n\r\n            // Format the proof for Solidity\r\n            const formattedProof = {\r\n                a: [ethers.BigNumber.from(a[0]), ethers.BigNumber.from(a[1])],\r\n                b: [\r\n                    [ethers.BigNumber.from(b[0][0]), ethers.BigNumber.from(b[0][1])],\r\n                    [ethers.BigNumber.from(b[1][0]), ethers.BigNumber.from(b[1][1])]\r\n                ],\r\n                c: [ethers.BigNumber.from(c[0]), ethers.BigNumber.from(c[1])]\r\n            };\r\n\r\n            const formattedInputs = inputs.map((i) => ethers.BigNumber.from(i));\r\n\r\n            // Call the `verifyTx` function\r\n            const isValid = await contract.verifyTx(formattedProof, formattedInputs);\r\n            \r\n            setResult(isValid ? \"✅ Proof is valid!\" : \"❌ Proof verification failed!\");\r\n        } catch (error) {\r\n            console.error(error);\r\n            setResult(\"⚠️ Error occurred during verification.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={verifyProofOnChain}>Verify Proof</button>\r\n            {result && <h3>{result}</h3>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VerifyProof;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}