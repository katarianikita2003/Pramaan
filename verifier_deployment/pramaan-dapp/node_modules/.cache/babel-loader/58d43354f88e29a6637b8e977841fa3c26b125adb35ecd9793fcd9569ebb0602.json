{"ast":null,"code":"var _jsxFileName = \"/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const handleRegister = async () => {\n    if (!userId) {\n      alert(\"Enter a valid ID\");\n      return;\n    }\n    const response = await fetch(\"http://localhost:5000/api/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      setSuccessMessage(\"✅ Successfully Registered!\");\n    } else {\n      alert(\"⚠️ \" + data.error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Employee/Biometric ID\",\n      onChange: e => setUserId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRegister,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"6KiDEN+osQiEuU88ZwSKaNVA8PA=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Register","_s","userId","setUserId","successMessage","setSuccessMessage","handleRegister","alert","response","fetch","method","headers","body","JSON","stringify","data","json","ok","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Register = () => {\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n    const handleRegister = async () => {\r\n        if (!userId) {\r\n            alert(\"Enter a valid ID\");\r\n            return;\r\n        }\r\n\r\n        const response = await fetch(\"http://localhost:5000/api/register\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ userId })\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            setSuccessMessage(\"✅ Successfully Registered!\");\r\n        } else {\r\n            alert(\"⚠️ \" + data.error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Register</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter Employee/Biometric ID\"\r\n                onChange={(e) => setUserId(e.target.value)}\r\n            />\r\n            <button onClick={handleRegister}>Register</button>\r\n            {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACJ,MAAM,EAAE;MACTK,KAAK,CAAC,kBAAkB,CAAC;MACzB;IACJ;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEZ;MAAO,CAAC;IACnC,CAAC,CAAC;IAEF,MAAMa,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACbZ,iBAAiB,CAAC,4BAA4B,CAAC;IACnD,CAAC,MAAM;MACHE,KAAK,CAAC,KAAK,GAAGQ,IAAI,CAACG,KAAK,CAAC;IAC7B;EACJ,CAAC;EAED,oBACInB,OAAA;IAAKoB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBrB,OAAA;MAAAqB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBzB,OAAA;MACI0B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,6BAA6B;MACzCC,QAAQ,EAAGC,CAAC,IAAKzB,SAAS,CAACyB,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACFzB,OAAA;MAAQgC,OAAO,EAAEzB,cAAe;MAAAc,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACjDpB,cAAc,iBAAIL,OAAA;MAAGoB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAEhB;IAAc;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEd,CAAC;AAACvB,EAAA,CApCID,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAsCd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}