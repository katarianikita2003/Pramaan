{"ast":null,"code":"import { BrowserProvider, Contract, toBigInt } from \"ethers\";\nimport verifierABI from \"../contract/VerifierABI.json\";\nexport const verifyProofOnChain = async proof => {\n  if (!window.ethereum) {\n    alert(\"MetaMask is required!\");\n    return false;\n  }\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  const provider = new BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new Contract(process.env.REACT_APP_CONTRACT_ADDRESS, verifierABI, signer);\n  const {\n    proof: {\n      a,\n      b,\n      c\n    },\n    inputs\n  } = proof;\n  const formattedProof = {\n    a: [toBigInt(a[0]), toBigInt(a[1])],\n    b: [[toBigInt(b[0][0]), toBigInt(b[0][1])], [toBigInt(b[1][0]), toBigInt(b[1][1])]],\n    c: [toBigInt(c[0]), toBigInt(c[1])]\n  };\n  const formattedInputs = inputs.map(i => toBigInt(i));\n  return await contract.verifyTx(formattedProof, formattedInputs);\n};","map":{"version":3,"names":["BrowserProvider","Contract","toBigInt","verifierABI","verifyProofOnChain","proof","window","ethereum","alert","request","method","provider","signer","getSigner","contract","process","env","REACT_APP_CONTRACT_ADDRESS","a","b","c","inputs","formattedProof","formattedInputs","map","i","verifyTx"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/utils/generateProof.js"],"sourcesContent":["import { BrowserProvider, Contract, toBigInt } from \"ethers\";\r\nimport verifierABI from \"../contract/VerifierABI.json\";\r\n\r\nexport const verifyProofOnChain = async (proof) => {\r\n    if (!window.ethereum) {\r\n        alert(\"MetaMask is required!\");\r\n        return false;\r\n    }\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n    const provider = new BrowserProvider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n    const contract = new Contract(process.env.REACT_APP_CONTRACT_ADDRESS, verifierABI, signer);\r\n\r\n    const { proof: { a, b, c }, inputs } = proof;\r\n    const formattedProof = {\r\n        a: [toBigInt(a[0]), toBigInt(a[1])],\r\n        b: [\r\n            [toBigInt(b[0][0]), toBigInt(b[0][1])],\r\n            [toBigInt(b[1][0]), toBigInt(b[1][1])]\r\n        ],\r\n        c: [toBigInt(c[0]), toBigInt(c[1])]\r\n    };\r\n    const formattedInputs = inputs.map((i) => toBigInt(i));\r\n\r\n    return await contract.verifyTx(formattedProof, formattedInputs);\r\n};\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,QAAQ;AAC5D,OAAOC,WAAW,MAAM,8BAA8B;AAEtD,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;EAC/C,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IAClBC,KAAK,CAAC,uBAAuB,CAAC;IAC9B,OAAO,KAAK;EAChB;EACA,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAsB,CAAC,CAAC;EAEhE,MAAMC,QAAQ,GAAG,IAAIX,eAAe,CAACM,MAAM,CAACC,QAAQ,CAAC;EACrD,MAAMK,MAAM,GAAG,MAAMD,QAAQ,CAACE,SAAS,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAG,IAAIb,QAAQ,CAACc,OAAO,CAACC,GAAG,CAACC,0BAA0B,EAAEd,WAAW,EAAES,MAAM,CAAC;EAE1F,MAAM;IAAEP,KAAK,EAAE;MAAEa,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC;IAAEC;EAAO,CAAC,GAAGhB,KAAK;EAC5C,MAAMiB,cAAc,GAAG;IACnBJ,CAAC,EAAE,CAAChB,QAAQ,CAACgB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEhB,QAAQ,CAACgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnCC,CAAC,EAAE,CACC,CAACjB,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEjB,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACtC,CAACjB,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEjB,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzC;IACDC,CAAC,EAAE,CAAClB,QAAQ,CAACkB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAElB,QAAQ,CAACkB,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;EACD,MAAMG,eAAe,GAAGF,MAAM,CAACG,GAAG,CAAEC,CAAC,IAAKvB,QAAQ,CAACuB,CAAC,CAAC,CAAC;EAEtD,OAAO,MAAMX,QAAQ,CAACY,QAAQ,CAACJ,cAAc,EAAEC,eAAe,CAAC;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}