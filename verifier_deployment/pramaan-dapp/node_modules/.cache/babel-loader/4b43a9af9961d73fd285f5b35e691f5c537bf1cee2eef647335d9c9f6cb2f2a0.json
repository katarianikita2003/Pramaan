{"ast":null,"code":"var _jsxFileName = \"/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handleRegister = async () => {\n    setSuccessMessage(\"\");\n    setErrorMessage(\"\");\n    if (!userId) {\n      setErrorMessage(\"⚠️ Please enter a valid Employee/Biometric ID.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5000/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSuccessMessage(\"✅ Successfully Registered!\");\n        setUserId(\"\"); // Clear input field\n      } else {\n        setErrorMessage(`⚠️ ${data.error || \"Registration failed.\"}`);\n      }\n    } catch (error) {\n      console.error(\"Registration Error:\", error);\n      setErrorMessage(\"⚠️ Server error. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Employee/Biometric ID\",\n      value: userId,\n      onChange: e => setUserId(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"register-btn\",\n      onClick: handleRegister,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 32\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"YDb/gNUAMPxoLyRhoNvdluRIwrA=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Register","_s","userId","setUserId","successMessage","setSuccessMessage","errorMessage","setErrorMessage","handleRegister","response","fetch","method","headers","body","JSON","stringify","data","json","ok","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","required","onClick","_c","$RefreshReg$"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Register = () => {\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const handleRegister = async () => {\r\n        setSuccessMessage(\"\");\r\n        setErrorMessage(\"\");\r\n\r\n        if (!userId) {\r\n            setErrorMessage(\"⚠️ Please enter a valid Employee/Biometric ID.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/register\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ userId }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                setSuccessMessage(\"✅ Successfully Registered!\");\r\n                setUserId(\"\"); // Clear input field\r\n            } else {\r\n                setErrorMessage(`⚠️ ${data.error || \"Registration failed.\"}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Registration Error:\", error);\r\n            setErrorMessage(\"⚠️ Server error. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"register-container\">\r\n            <h2>Register</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter Employee/Biometric ID\"\r\n                value={userId}\r\n                onChange={(e) => setUserId(e.target.value)}\r\n                required\r\n            />\r\n            <button className=\"register-btn\" onClick={handleRegister}>Register</button>\r\n\r\n            {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/BH,iBAAiB,CAAC,EAAE,CAAC;IACrBE,eAAe,CAAC,EAAE,CAAC;IAEnB,IAAI,CAACL,MAAM,EAAE;MACTK,eAAe,CAAC,gDAAgD,CAAC;MACjE;IACJ;IAEA,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEb;QAAO,CAAC;MACnC,CAAC,CAAC;MAEF,MAAMc,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACbb,iBAAiB,CAAC,4BAA4B,CAAC;QAC/CF,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACnB,CAAC,MAAM;QACHI,eAAe,CAAC,MAAMS,IAAI,CAACG,KAAK,IAAI,sBAAsB,EAAE,CAAC;MACjE;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CZ,eAAe,CAAC,oCAAoC,CAAC;IACzD;EACJ,CAAC;EAED,oBACIR,OAAA;IAAKsB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/BvB,OAAA;MAAAuB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB3B,OAAA;MACI4B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,6BAA6B;MACzCC,KAAK,EAAE3B,MAAO;MACd4B,QAAQ,EAAGC,CAAC,IAAK5B,SAAS,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC3CI,QAAQ;IAAA;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eACF3B,OAAA;MAAQsB,SAAS,EAAC,cAAc;MAACa,OAAO,EAAE1B,cAAe;MAAAc,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE1EtB,cAAc,iBAAIL,OAAA;MAAGsB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAElB;IAAc;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrEpB,YAAY,iBAAIP,OAAA;MAAGsB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEhB;IAAY;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEd,CAAC;AAACzB,EAAA,CAnDID,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAqDd,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}