{"ast":null,"code":"import { BrowserProvider, Contract, toBigInt } from \"ethers\";\nimport verifierABI from \"../contract/Verifier.json\";\n\n// Ensure contract address is defined\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || \"0xYourDeployedContractAddress\";\nexport const verifyProofOnChain = async proof => {\n  if (!window.ethereum) {\n    alert(\"MetaMask is required!\");\n    return false;\n  }\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  const provider = new BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  if (!CONTRACT_ADDRESS || CONTRACT_ADDRESS === \"0xYourDeployedContractAddress\") {\n    alert(\"⚠️ Contract address is missing! Set REACT_APP_CONTRACT_ADDRESS in .env.\");\n    return false;\n  }\n  const contract = new Contract(CONTRACT_ADDRESS, verifierABI, signer);\n  const {\n    proof: {\n      a,\n      b,\n      c\n    },\n    inputs\n  } = proof;\n  const formattedProof = {\n    a: [toBigInt(a[0]), toBigInt(a[1])],\n    b: [[toBigInt(b[0][0]), toBigInt(b[0][1])], [toBigInt(b[1][0]), toBigInt(b[1][1])]],\n    c: [toBigInt(c[0]), toBigInt(c[1])]\n  };\n  const formattedInputs = inputs.map(i => toBigInt(i));\n  return await contract.verifyTx(formattedProof, formattedInputs);\n};","map":{"version":3,"names":["BrowserProvider","Contract","toBigInt","verifierABI","CONTRACT_ADDRESS","process","env","REACT_APP_CONTRACT_ADDRESS","verifyProofOnChain","proof","window","ethereum","alert","request","method","provider","signer","getSigner","contract","a","b","c","inputs","formattedProof","formattedInputs","map","i","verifyTx"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/utils/generateProof.js"],"sourcesContent":["import { BrowserProvider, Contract, toBigInt } from \"ethers\";\r\nimport verifierABI from \"../contract/Verifier.json\";\r\n\r\n// Ensure contract address is defined\r\nconst CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS || \"0xYourDeployedContractAddress\";\r\n\r\nexport const verifyProofOnChain = async (proof) => {\r\n    if (!window.ethereum) {\r\n        alert(\"MetaMask is required!\");\r\n        return false;\r\n    }\r\n\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n    const provider = new BrowserProvider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n\r\n    if (!CONTRACT_ADDRESS || CONTRACT_ADDRESS === \"0xYourDeployedContractAddress\") {\r\n        alert(\"⚠️ Contract address is missing! Set REACT_APP_CONTRACT_ADDRESS in .env.\");\r\n        return false;\r\n    }\r\n\r\n    const contract = new Contract(CONTRACT_ADDRESS, verifierABI, signer);\r\n\r\n    const { proof: { a, b, c }, inputs } = proof;\r\n    const formattedProof = {\r\n        a: [toBigInt(a[0]), toBigInt(a[1])],\r\n        b: [\r\n            [toBigInt(b[0][0]), toBigInt(b[0][1])],\r\n            [toBigInt(b[1][0]), toBigInt(b[1][1])]\r\n        ],\r\n        c: [toBigInt(c[0]), toBigInt(c[1])]\r\n    };\r\n    const formattedInputs = inputs.map((i) => toBigInt(i));\r\n\r\n    return await contract.verifyTx(formattedProof, formattedInputs);\r\n};\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,QAAQ;AAC5D,OAAOC,WAAW,MAAM,2BAA2B;;AAEnD;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B,IAAI,+BAA+B;AAElG,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,KAAK,IAAK;EAC/C,IAAI,CAACC,MAAM,CAACC,QAAQ,EAAE;IAClBC,KAAK,CAAC,uBAAuB,CAAC;IAC9B,OAAO,KAAK;EAChB;EAEA,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAsB,CAAC,CAAC;EAEhE,MAAMC,QAAQ,GAAG,IAAIf,eAAe,CAACU,MAAM,CAACC,QAAQ,CAAC;EACrD,MAAMK,MAAM,GAAG,MAAMD,QAAQ,CAACE,SAAS,CAAC,CAAC;EAEzC,IAAI,CAACb,gBAAgB,IAAIA,gBAAgB,KAAK,+BAA+B,EAAE;IAC3EQ,KAAK,CAAC,yEAAyE,CAAC;IAChF,OAAO,KAAK;EAChB;EAEA,MAAMM,QAAQ,GAAG,IAAIjB,QAAQ,CAACG,gBAAgB,EAAED,WAAW,EAAEa,MAAM,CAAC;EAEpE,MAAM;IAAEP,KAAK,EAAE;MAAEU,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC;IAAEC;EAAO,CAAC,GAAGb,KAAK;EAC5C,MAAMc,cAAc,GAAG;IACnBJ,CAAC,EAAE,CAACjB,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEjB,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnCC,CAAC,EAAE,CACC,CAAClB,QAAQ,CAACkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAElB,QAAQ,CAACkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACtC,CAAClB,QAAQ,CAACkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAElB,QAAQ,CAACkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzC;IACDC,CAAC,EAAE,CAACnB,QAAQ,CAACmB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEnB,QAAQ,CAACmB,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;EACD,MAAMG,eAAe,GAAGF,MAAM,CAACG,GAAG,CAAEC,CAAC,IAAKxB,QAAQ,CAACwB,CAAC,CAAC,CAAC;EAEtD,OAAO,MAAMR,QAAQ,CAACS,QAAQ,CAACJ,cAAc,EAAEC,eAAe,CAAC;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}