{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pramaan - ZKP\\\\Pramaan\\\\verifier_deployment\\\\pramaan-dapp\\\\src\\\\components\\\\VerifyProof.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerifyProof = () => {\n  _s();\n  const [proof, setProof] = useState(null);\n  const [status, setStatus] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n  const [verificationDetails, setVerificationDetails] = useState(null);\n\n  // Handles proof.json file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    if (!file.name.endsWith('.json')) {\n      setError(\"Please upload a .json file\");\n      return;\n    }\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const jsonProof = JSON.parse(e.target.result);\n\n        // Validate if proof contains required fields\n        if (!jsonProof.proof || !jsonProof.inputs) {\n          throw new Error(\"Invalid proof file: Missing required fields (proof, inputs)\");\n        }\n\n        // Additional validation\n        if (!jsonProof.proof.a || !jsonProof.proof.b || !jsonProof.proof.c) {\n          throw new Error(\"Invalid proof structure: Missing proof components (a, b, c)\");\n        }\n        setProof(jsonProof);\n        setError(\"\");\n        setStatus(\"\");\n        setVerificationDetails(null);\n      } catch (error) {\n        setError(\"Invalid JSON file: \" + error.message);\n        setProof(null);\n        setFileName(\"\");\n      }\n    };\n    reader.onerror = () => {\n      setError(\"Error reading file\");\n      setFileName(\"\");\n    };\n    reader.readAsText(file);\n  };\n\n  // Handles Proof Verification\n  const handleVerify = async () => {\n    const email = localStorage.getItem(\"userEmail\");\n    if (!email) {\n      setError(\"User not logged in! Please login first.\");\n      return;\n    }\n    if (!proof) {\n      setError(\"Please upload a valid proof.json file.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(\"\");\n    setStatus(\"\");\n    setVerificationDetails(null);\n    try {\n      console.log('Sending verification request...');\n      const response = await fetch(\"http://localhost:5000/api/verify\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          proof,\n          email\n        })\n      });\n      const data = await response.json();\n      console.log('Verification response:', data);\n      if (!response.ok) {\n        throw new Error(data.error || \"Verification Failed\");\n      }\n\n      // Set detailed verification results\n      setVerificationDetails({\n        isRealProof: data.isRealProof,\n        zkStatus: data.zkStatus,\n        proofAge: data.proofAge\n      });\n      setStatus(data.success ? \"success\" : \"failure\");\n    } catch (error) {\n      console.error(\"Verification error:\", error);\n      setStatus(\"failure\");\n      setError(`Verification Failed: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Reset file upload\n  const handleChangeFile = () => {\n    setProof(null);\n    setFileName(\"\");\n    setStatus(\"\");\n    setError(\"\");\n    setVerificationDetails(null);\n    // Reset file input\n    const fileInput = document.querySelector('input[type=\"file\"]');\n    if (fileInput) fileInput.value = \"\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"verify-proof-container glass-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDD0D Verify Proof\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"verify-info\",\n      children: \"Upload a proof.json file to verify your Zero-Knowledge Proof authentication.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload-section\",\n      children: !fileName ? /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"file-upload-label\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"upload-icon\",\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Click to upload proof.json\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-icon\",\n          children: \"\\uD83D\\uDCC4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-name\",\n          children: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleChangeFile,\n          className: \"change-file-btn\",\n          children: \"Change File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), proof && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success\",\n      children: \"Proof loaded successfully\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 23\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 23\n    }, this), status === \"success\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-success\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u2705 Authentication Success!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), verificationDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"detail-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Proof Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: verificationDetails.isRealProof ? \"real-proof\" : \"simulated-proof\",\n            children: verificationDetails.isRealProof ? \"Real ZK Proof\" : \"Simulated Proof\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"detail-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this), \" \", verificationDetails.zkStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 29\n        }, this), verificationDetails.proofAge && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"detail-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Proof Age:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: verificationDetails.proofAge === \"fresh\" ? \"fresh\" : \"expired\",\n            children: verificationDetails.proofAge === \"fresh\" ? \"Fresh (< 5 min)\" : \"Expired (> 5 min)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this), status === \"failure\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-failure\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u274C Authentication Failed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The proof is invalid or does not match your credentials.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"help-text\",\n        children: \"Make sure you're using a proof generated with your current account.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"verify-btn\",\n      onClick: handleVerify,\n      disabled: isLoading || !proof,\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 30\n      }, this) : \"Verify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(VerifyProof, \"zJXMF5iWugdmiPn+c78SQuTuyz0=\");\n_c = VerifyProof;\nexport default VerifyProof;\n\n// import React, { useState } from \"react\";\n// import \"../styles/App.css\";\n\n// const VerifyProof = () => {\n//     const [proof, setProof] = useState(null);\n//     const [status, setStatus] = useState(\"\");\n//     const [error, setError] = useState(\"\");\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [fileName, setFileName] = useState(\"\");\n\n//     // Handles proof.json file upload\n//     const handleFileUpload = (event) => {\n//         const file = event.target.files[0];\n//         if (!file) return;\n\n//         if (!file.name.endsWith('.json')) {\n//             setError(\"Please upload a .json file\");\n//             return;\n//         }\n\n//         setFileName(file.name);\n//         const reader = new FileReader();\n\n//         reader.onload = (e) => {\n//             try {\n//                 const jsonProof = JSON.parse(e.target.result);\n\n//                 // Validate if proof contains required fields\n//                 if (!jsonProof.proof || !jsonProof.inputs) {\n//                     throw new Error(\"Invalid proof file: Missing required fields\");\n//                 }\n\n//                 setProof(jsonProof);\n//                 setError(\"\");\n//                 setStatus(\"\");\n//             } catch (error) {\n//                 setError(\"Invalid JSON file: \" + error.message);\n//                 setProof(null);\n//                 setFileName(\"\");\n//             }\n//         };\n\n//         reader.onerror = () => {\n//             setError(\"Error reading file\");\n//             setFileName(\"\");\n//         };\n\n//         reader.readAsText(file);\n//     };\n\n//     // Handles Proof Verification\n//     const handleVerify = async () => {\n//         const email = localStorage.getItem(\"userEmail\");\n\n//         if (!email) {\n//             setError(\"User not logged in! Please login first.\");\n//             return;\n//         }\n\n//         if (!proof) {\n//             setError(\"Please upload a valid proof.json file.\");\n//             return;\n//         }\n\n//         setIsLoading(true);\n//         setError(\"\");\n//         setStatus(\"\");\n\n//         try {\n//             const response = await fetch(\"http://localhost:5000/api/verify\", {\n//                 method: \"POST\",\n//                 headers: { \"Content-Type\": \"application/json\" },\n//                 body: JSON.stringify({ proof, email }),\n//             });\n\n//             const data = await response.json();\n\n//             if (!response.ok) {\n//                 throw new Error(data.error || \"Verification Failed\");\n//             }\n\n//             setStatus(data.success ? \"✅ Authentication Success!\" : \"❌ Authentication Failed!\");\n//         } catch (error) {\n//             setError(`Verification Failed: ${error.message}`);\n//             setStatus(\"\");\n//         } finally {\n//             setIsLoading(false);\n//         }\n//     };\n\n//     const handleReset = () => {\n//         setProof(null);\n//         setStatus(\"\");\n//         setError(\"\");\n//         setFileName(\"\");\n//         // Reset file input\n//         const fileInput = document.getElementById('file-input');\n//         if (fileInput) fileInput.value = '';\n//     };\n\n//     return (\n//         <div className=\"verify-proof-container glass-card\">\n//             <h2>🔍 Verify Proof</h2>\n\n//             <p className=\"verify-info\">\n//                 Upload a proof.json file to verify your Zero-Knowledge Proof authentication.\n//             </p>\n\n//             <div className=\"file-upload-section\">\n//                 <input\n//                     type=\"file\"\n//                     id=\"file-input\"\n//                     accept=\".json\"\n//                     onChange={handleFileUpload}\n//                     className=\"file-input\"\n//                     disabled={isLoading}\n//                 />\n//                 <label htmlFor=\"file-input\" className=\"file-upload-label\">\n//                     {fileName ? (\n//                         <span className=\"file-selected\">\n//                             📄 {fileName}\n//                         </span>\n//                     ) : (\n//                         <span className=\"file-prompt\">\n//                             📁 Choose proof.json file\n//                         </span>\n//                     )}\n//                 </label>\n//             </div>\n\n//             {proof && (\n//                 <div className=\"proof-preview\">\n//                     <p className=\"preview-title\">Proof loaded successfully</p>\n//                     <button onClick={handleReset} className=\"reset-btn\">\n//                         Change File\n//                     </button>\n//                 </div>\n//             )}\n\n//             {error && <div className=\"error\">{error}</div>}\n//             {status && <div className={status.includes(\"Success\") ? \"success\" : \"error\"}>{status}</div>}\n\n//             <button \n//                 className=\"verify-btn\" \n//                 onClick={handleVerify}\n//                 disabled={isLoading || !proof}\n//             >\n//                 {isLoading ? <span className=\"loading\"></span> : \"Verify\"}\n//             </button>\n//         </div>\n//     );\n// };\n\n// export default VerifyProof;\n\n// // import React, { useState } from \"react\";\n\n// // const VerifyProof = () => {\n// //     const [proof, setProof] = useState(null);\n// //     const [status, setStatus] = useState(\"\");\n// //     const [error, setError] = useState(\"\");\n\n// //     // Handles proof.json file upload\n// //     const handleFileUpload = (event) => {\n// //         const file = event.target.files[0];\n// //         const reader = new FileReader();\n\n// //         reader.onload = (e) => {\n// //             try {\n// //                 const jsonProof = JSON.parse(e.target.result);\n\n// //                 // Validate if proof contains \"inputs\"\n// //                 if (!jsonProof.inputs || !Array.isArray(jsonProof.inputs) || jsonProof.inputs.length === 0) {\n// //                     throw new Error(\"Invalid proof file: Missing inputs\");\n// //                 }\n\n// //                 setProof(jsonProof);\n// //                 setError(\"\");\n// //             } catch (error) {\n// //                 setError(\"❌ Invalid JSON file: \" + error.message);\n// //                 setProof(null);\n// //             }\n// //         };\n// //         reader.readAsText(file);\n// //     };\n\n// //     // Handles Proof Verification on the backend\n// //     const handleVerify = async () => {\n// //         const email = localStorage.getItem(\"userEmail\");\n\n// //         if (!email) {\n// //             setError(\"❌ User not logged in! Please login first.\");\n// //             return;\n// //         }\n\n// //         if (!proof) {\n// //             setError(\"❌ Please upload a valid proof.json file.\");\n// //             return;\n// //         }\n\n// //         try {\n// //             console.log(`📤 Sending verification request for User: ${email}`);\n\n// //             const response = await fetch(\"http://localhost:5000/api/verify\", {\n// //                 method: \"POST\",\n// //                 headers: { \"Content-Type\": \"application/json\" },\n// //                 body: JSON.stringify({ proof, email }),\n// //             });\n\n// //             if (!response.ok) {\n// //                 const errorData = await response.json();\n// //                 throw new Error(errorData.error || \"Verification Failed\");\n// //             }\n\n// //             const data = await response.json();\n// //             setStatus(data.success ? \"✅ Authentication Success!\" : \"❌ Authentication Failed!\");\n// //             setError(\"\");\n// //         } catch (error) {\n// //             console.error(\"❌ Error during verification:\", error);\n// //             setStatus(\"\");\n// //             setError(`❌ Verification Failed: ${error.message}`);\n// //         }\n// //     };\n\n// //     return (\n// //         <div className=\"verify-proof-container\">\n// //             <h2>Verify Proof</h2>\n// //             <input type=\"file\" accept=\".json\" onChange={handleFileUpload} />\n// //             <button className=\"verify-btn\" onClick={handleVerify}>Verify</button>\n// //             {error && <p className=\"error-message\">{error}</p>}\n// //             {status && <p className=\"verification-status\">{status}</p>}\n// //         </div>\n// //     );\n// // };\n\n// // export default VerifyProof;\nvar _c;\n$RefreshReg$(_c, \"VerifyProof\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","VerifyProof","_s","proof","setProof","status","setStatus","error","setError","isLoading","setIsLoading","fileName","setFileName","verificationDetails","setVerificationDetails","handleFileUpload","event","file","target","files","name","endsWith","reader","FileReader","onload","e","jsonProof","JSON","parse","result","inputs","Error","a","b","c","message","onerror","readAsText","handleVerify","email","localStorage","getItem","console","log","response","fetch","method","headers","body","stringify","data","json","ok","isRealProof","zkStatus","proofAge","success","handleChangeFile","fileInput","document","querySelector","value","className","children","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Pramaan - ZKP/Pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/App.css\";\r\n\r\nconst VerifyProof = () => {\r\n    const [proof, setProof] = useState(null);\r\n    const [status, setStatus] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [fileName, setFileName] = useState(\"\");\r\n    const [verificationDetails, setVerificationDetails] = useState(null);\r\n\r\n    // Handles proof.json file upload\r\n    const handleFileUpload = (event) => {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n\r\n        if (!file.name.endsWith('.json')) {\r\n            setError(\"Please upload a .json file\");\r\n            return;\r\n        }\r\n\r\n        setFileName(file.name);\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            try {\r\n                const jsonProof = JSON.parse(e.target.result);\r\n\r\n                // Validate if proof contains required fields\r\n                if (!jsonProof.proof || !jsonProof.inputs) {\r\n                    throw new Error(\"Invalid proof file: Missing required fields (proof, inputs)\");\r\n                }\r\n\r\n                // Additional validation\r\n                if (!jsonProof.proof.a || !jsonProof.proof.b || !jsonProof.proof.c) {\r\n                    throw new Error(\"Invalid proof structure: Missing proof components (a, b, c)\");\r\n                }\r\n\r\n                setProof(jsonProof);\r\n                setError(\"\");\r\n                setStatus(\"\");\r\n                setVerificationDetails(null);\r\n            } catch (error) {\r\n                setError(\"Invalid JSON file: \" + error.message);\r\n                setProof(null);\r\n                setFileName(\"\");\r\n            }\r\n        };\r\n\r\n        reader.onerror = () => {\r\n            setError(\"Error reading file\");\r\n            setFileName(\"\");\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    // Handles Proof Verification\r\n    const handleVerify = async () => {\r\n        const email = localStorage.getItem(\"userEmail\");\r\n\r\n        if (!email) {\r\n            setError(\"User not logged in! Please login first.\");\r\n            return;\r\n        }\r\n\r\n        if (!proof) {\r\n            setError(\"Please upload a valid proof.json file.\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(\"\");\r\n        setStatus(\"\");\r\n        setVerificationDetails(null);\r\n\r\n        try {\r\n            console.log('Sending verification request...');\r\n            \r\n            const response = await fetch(\"http://localhost:5000/api/verify\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ proof, email }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('Verification response:', data);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || \"Verification Failed\");\r\n            }\r\n\r\n            // Set detailed verification results\r\n            setVerificationDetails({\r\n                isRealProof: data.isRealProof,\r\n                zkStatus: data.zkStatus,\r\n                proofAge: data.proofAge\r\n            });\r\n\r\n            setStatus(data.success ? \"success\" : \"failure\");\r\n            \r\n        } catch (error) {\r\n            console.error(\"Verification error:\", error);\r\n            setStatus(\"failure\");\r\n            setError(`Verification Failed: ${error.message}`);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Reset file upload\r\n    const handleChangeFile = () => {\r\n        setProof(null);\r\n        setFileName(\"\");\r\n        setStatus(\"\");\r\n        setError(\"\");\r\n        setVerificationDetails(null);\r\n        // Reset file input\r\n        const fileInput = document.querySelector('input[type=\"file\"]');\r\n        if (fileInput) fileInput.value = \"\";\r\n    };\r\n\r\n    return (\r\n        <div className=\"verify-proof-container glass-card\">\r\n            <h2>🔍 Verify Proof</h2>\r\n            \r\n            <p className=\"verify-info\">\r\n                Upload a proof.json file to verify your Zero-Knowledge Proof authentication.\r\n            </p>\r\n\r\n            <div className=\"file-upload-section\">\r\n                {!fileName ? (\r\n                    <label className=\"file-upload-label\">\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\".json\"\r\n                            onChange={handleFileUpload}\r\n                            className=\"file-input\"\r\n                        />\r\n                        <span className=\"upload-icon\">📁</span>\r\n                        <span>Click to upload proof.json</span>\r\n                    </label>\r\n                ) : (\r\n                    <div className=\"file-info\">\r\n                        <span className=\"file-icon\">📄</span>\r\n                        <span className=\"file-name\">{fileName}</span>\r\n                        <button onClick={handleChangeFile} className=\"change-file-btn\">\r\n                            Change File\r\n                        </button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            {proof && <div className=\"success\">Proof loaded successfully</div>}\r\n            {error && <div className=\"error\">{error}</div>}\r\n            \r\n            {status === \"success\" && (\r\n                <div className=\"verification-success\">\r\n                    <h3>✅ Authentication Success!</h3>\r\n                    {verificationDetails && (\r\n                        <div className=\"verification-details\">\r\n                            <p className=\"detail-item\">\r\n                                <strong>Proof Type:</strong> \r\n                                <span className={verificationDetails.isRealProof ? \"real-proof\" : \"simulated-proof\"}>\r\n                                    {verificationDetails.isRealProof ? \"Real ZK Proof\" : \"Simulated Proof\"}\r\n                                </span>\r\n                            </p>\r\n                            <p className=\"detail-item\">\r\n                                <strong>Status:</strong> {verificationDetails.zkStatus}\r\n                            </p>\r\n                            {verificationDetails.proofAge && (\r\n                                <p className=\"detail-item\">\r\n                                    <strong>Proof Age:</strong> \r\n                                    <span className={verificationDetails.proofAge === \"fresh\" ? \"fresh\" : \"expired\"}>\r\n                                        {verificationDetails.proofAge === \"fresh\" ? \"Fresh (< 5 min)\" : \"Expired (> 5 min)\"}\r\n                                    </span>\r\n                                </p>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n            \r\n            {status === \"failure\" && (\r\n                <div className=\"verification-failure\">\r\n                    <h3>❌ Authentication Failed!</h3>\r\n                    <p>The proof is invalid or does not match your credentials.</p>\r\n                    <p className=\"help-text\">\r\n                        Make sure you're using a proof generated with your current account.\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            <button \r\n                className=\"verify-btn\" \r\n                onClick={handleVerify}\r\n                disabled={isLoading || !proof}\r\n            >\r\n                {isLoading ? <span className=\"loading\"></span> : \"Verify\"}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VerifyProof;\r\n\r\n// import React, { useState } from \"react\";\r\n// import \"../styles/App.css\";\r\n\r\n// const VerifyProof = () => {\r\n//     const [proof, setProof] = useState(null);\r\n//     const [status, setStatus] = useState(\"\");\r\n//     const [error, setError] = useState(\"\");\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const [fileName, setFileName] = useState(\"\");\r\n\r\n//     // Handles proof.json file upload\r\n//     const handleFileUpload = (event) => {\r\n//         const file = event.target.files[0];\r\n//         if (!file) return;\r\n\r\n//         if (!file.name.endsWith('.json')) {\r\n//             setError(\"Please upload a .json file\");\r\n//             return;\r\n//         }\r\n\r\n//         setFileName(file.name);\r\n//         const reader = new FileReader();\r\n\r\n//         reader.onload = (e) => {\r\n//             try {\r\n//                 const jsonProof = JSON.parse(e.target.result);\r\n\r\n//                 // Validate if proof contains required fields\r\n//                 if (!jsonProof.proof || !jsonProof.inputs) {\r\n//                     throw new Error(\"Invalid proof file: Missing required fields\");\r\n//                 }\r\n\r\n//                 setProof(jsonProof);\r\n//                 setError(\"\");\r\n//                 setStatus(\"\");\r\n//             } catch (error) {\r\n//                 setError(\"Invalid JSON file: \" + error.message);\r\n//                 setProof(null);\r\n//                 setFileName(\"\");\r\n//             }\r\n//         };\r\n\r\n//         reader.onerror = () => {\r\n//             setError(\"Error reading file\");\r\n//             setFileName(\"\");\r\n//         };\r\n\r\n//         reader.readAsText(file);\r\n//     };\r\n\r\n//     // Handles Proof Verification\r\n//     const handleVerify = async () => {\r\n//         const email = localStorage.getItem(\"userEmail\");\r\n\r\n//         if (!email) {\r\n//             setError(\"User not logged in! Please login first.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!proof) {\r\n//             setError(\"Please upload a valid proof.json file.\");\r\n//             return;\r\n//         }\r\n\r\n//         setIsLoading(true);\r\n//         setError(\"\");\r\n//         setStatus(\"\");\r\n\r\n//         try {\r\n//             const response = await fetch(\"http://localhost:5000/api/verify\", {\r\n//                 method: \"POST\",\r\n//                 headers: { \"Content-Type\": \"application/json\" },\r\n//                 body: JSON.stringify({ proof, email }),\r\n//             });\r\n\r\n//             const data = await response.json();\r\n\r\n//             if (!response.ok) {\r\n//                 throw new Error(data.error || \"Verification Failed\");\r\n//             }\r\n\r\n//             setStatus(data.success ? \"✅ Authentication Success!\" : \"❌ Authentication Failed!\");\r\n//         } catch (error) {\r\n//             setError(`Verification Failed: ${error.message}`);\r\n//             setStatus(\"\");\r\n//         } finally {\r\n//             setIsLoading(false);\r\n//         }\r\n//     };\r\n\r\n//     const handleReset = () => {\r\n//         setProof(null);\r\n//         setStatus(\"\");\r\n//         setError(\"\");\r\n//         setFileName(\"\");\r\n//         // Reset file input\r\n//         const fileInput = document.getElementById('file-input');\r\n//         if (fileInput) fileInput.value = '';\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"verify-proof-container glass-card\">\r\n//             <h2>🔍 Verify Proof</h2>\r\n            \r\n//             <p className=\"verify-info\">\r\n//                 Upload a proof.json file to verify your Zero-Knowledge Proof authentication.\r\n//             </p>\r\n\r\n//             <div className=\"file-upload-section\">\r\n//                 <input\r\n//                     type=\"file\"\r\n//                     id=\"file-input\"\r\n//                     accept=\".json\"\r\n//                     onChange={handleFileUpload}\r\n//                     className=\"file-input\"\r\n//                     disabled={isLoading}\r\n//                 />\r\n//                 <label htmlFor=\"file-input\" className=\"file-upload-label\">\r\n//                     {fileName ? (\r\n//                         <span className=\"file-selected\">\r\n//                             📄 {fileName}\r\n//                         </span>\r\n//                     ) : (\r\n//                         <span className=\"file-prompt\">\r\n//                             📁 Choose proof.json file\r\n//                         </span>\r\n//                     )}\r\n//                 </label>\r\n//             </div>\r\n\r\n//             {proof && (\r\n//                 <div className=\"proof-preview\">\r\n//                     <p className=\"preview-title\">Proof loaded successfully</p>\r\n//                     <button onClick={handleReset} className=\"reset-btn\">\r\n//                         Change File\r\n//                     </button>\r\n//                 </div>\r\n//             )}\r\n\r\n//             {error && <div className=\"error\">{error}</div>}\r\n//             {status && <div className={status.includes(\"Success\") ? \"success\" : \"error\"}>{status}</div>}\r\n\r\n//             <button \r\n//                 className=\"verify-btn\" \r\n//                 onClick={handleVerify}\r\n//                 disabled={isLoading || !proof}\r\n//             >\r\n//                 {isLoading ? <span className=\"loading\"></span> : \"Verify\"}\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default VerifyProof;\r\n\r\n// // import React, { useState } from \"react\";\r\n\r\n// // const VerifyProof = () => {\r\n// //     const [proof, setProof] = useState(null);\r\n// //     const [status, setStatus] = useState(\"\");\r\n// //     const [error, setError] = useState(\"\");\r\n\r\n// //     // Handles proof.json file upload\r\n// //     const handleFileUpload = (event) => {\r\n// //         const file = event.target.files[0];\r\n// //         const reader = new FileReader();\r\n\r\n// //         reader.onload = (e) => {\r\n// //             try {\r\n// //                 const jsonProof = JSON.parse(e.target.result);\r\n\r\n// //                 // Validate if proof contains \"inputs\"\r\n// //                 if (!jsonProof.inputs || !Array.isArray(jsonProof.inputs) || jsonProof.inputs.length === 0) {\r\n// //                     throw new Error(\"Invalid proof file: Missing inputs\");\r\n// //                 }\r\n\r\n// //                 setProof(jsonProof);\r\n// //                 setError(\"\");\r\n// //             } catch (error) {\r\n// //                 setError(\"❌ Invalid JSON file: \" + error.message);\r\n// //                 setProof(null);\r\n// //             }\r\n// //         };\r\n// //         reader.readAsText(file);\r\n// //     };\r\n\r\n// //     // Handles Proof Verification on the backend\r\n// //     const handleVerify = async () => {\r\n// //         const email = localStorage.getItem(\"userEmail\");\r\n\r\n// //         if (!email) {\r\n// //             setError(\"❌ User not logged in! Please login first.\");\r\n// //             return;\r\n// //         }\r\n\r\n// //         if (!proof) {\r\n// //             setError(\"❌ Please upload a valid proof.json file.\");\r\n// //             return;\r\n// //         }\r\n\r\n// //         try {\r\n// //             console.log(`📤 Sending verification request for User: ${email}`);\r\n\r\n// //             const response = await fetch(\"http://localhost:5000/api/verify\", {\r\n// //                 method: \"POST\",\r\n// //                 headers: { \"Content-Type\": \"application/json\" },\r\n// //                 body: JSON.stringify({ proof, email }),\r\n// //             });\r\n\r\n// //             if (!response.ok) {\r\n// //                 const errorData = await response.json();\r\n// //                 throw new Error(errorData.error || \"Verification Failed\");\r\n// //             }\r\n\r\n// //             const data = await response.json();\r\n// //             setStatus(data.success ? \"✅ Authentication Success!\" : \"❌ Authentication Failed!\");\r\n// //             setError(\"\");\r\n// //         } catch (error) {\r\n// //             console.error(\"❌ Error during verification:\", error);\r\n// //             setStatus(\"\");\r\n// //             setError(`❌ Verification Failed: ${error.message}`);\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className=\"verify-proof-container\">\r\n// //             <h2>Verify Proof</h2>\r\n// //             <input type=\"file\" accept=\".json\" onChange={handleFileUpload} />\r\n// //             <button className=\"verify-btn\" onClick={handleVerify}>Verify</button>\r\n// //             {error && <p className=\"error-message\">{error}</p>}\r\n// //             {status && <p className=\"verification-status\">{status}</p>}\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default VerifyProof;\r\n"],"mappings":"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CA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}