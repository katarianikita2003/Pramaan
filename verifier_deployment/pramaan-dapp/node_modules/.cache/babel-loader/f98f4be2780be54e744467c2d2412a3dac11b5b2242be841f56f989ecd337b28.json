{"ast":null,"code":"var _jsxFileName = \"/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerifyProof = () => {\n  _s();\n  const [proof, setProof] = useState(null);\n  const [status, setStatus] = useState(\"\");\n\n  // Handles proof.json file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const jsonProof = JSON.parse(e.target.result);\n\n        // Validate if proof contains \"inputs\"\n        if (!jsonProof.inputs || !Array.isArray(jsonProof.inputs) || jsonProof.inputs.length === 0) {\n          throw new Error(\"Invalid proof file: Missing inputs\");\n        }\n        setProof(jsonProof);\n      } catch (error) {\n        alert(\"Invalid JSON file: \" + error.message);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Handles Proof Verification on the backend\n  const handleVerify = async () => {\n    const email = localStorage.getItem(\"userEmail\");\n    if (!email) {\n      alert(\"User not logged in!\");\n      return;\n    }\n    const response = await fetch(\"http://localhost:5000/api/verify\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        proof,\n        email\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || \"Verification Failed\");\n    }\n    const data = await response.json();\n    setStatus(data.success ? \"✅ Authentication Success!\" : \"❌ Authentication Failed!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"verify-proof-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Verify Proof\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".json\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"verify-btn\",\n      onClick: handleVerify,\n      children: \"Verify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"verification-status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(VerifyProof, \"WRyG0X1dM4bJlzaBQaYns+MO7tM=\");\n_c = VerifyProof;\nexport default VerifyProof;\nvar _c;\n$RefreshReg$(_c, \"VerifyProof\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","VerifyProof","_s","proof","setProof","status","setStatus","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","jsonProof","JSON","parse","result","inputs","Array","isArray","length","Error","error","alert","message","readAsText","handleVerify","email","localStorage","getItem","response","fetch","method","headers","body","stringify","ok","errorData","json","data","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst VerifyProof = () => {\r\n    const [proof, setProof] = useState(null);\r\n    const [status, setStatus] = useState(\"\");\r\n\r\n    // Handles proof.json file upload\r\n    const handleFileUpload = (event) => {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            try {\r\n                const jsonProof = JSON.parse(e.target.result);\r\n\r\n                // Validate if proof contains \"inputs\"\r\n                if (!jsonProof.inputs || !Array.isArray(jsonProof.inputs) || jsonProof.inputs.length === 0) {\r\n                    throw new Error(\"Invalid proof file: Missing inputs\");\r\n                }\r\n\r\n                setProof(jsonProof);\r\n            } catch (error) {\r\n                alert(\"Invalid JSON file: \" + error.message);\r\n            }\r\n        };\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    // Handles Proof Verification on the backend\r\n    const handleVerify = async () => {\r\n        const email = localStorage.getItem(\"userEmail\");\r\n        if (!email) {\r\n            alert(\"User not logged in!\");\r\n            return;\r\n        }\r\n    \r\n        const response = await fetch(\"http://localhost:5000/api/verify\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ proof, email })\r\n        });\r\n    \r\n        if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.error || \"Verification Failed\");\r\n        }\r\n    \r\n        const data = await response.json();\r\n        setStatus(data.success ? \"✅ Authentication Success!\" : \"❌ Authentication Failed!\");\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"verify-proof-container\">\r\n            <h2>Verify Proof</h2>\r\n            <input type=\"file\" accept=\".json\" onChange={handleFileUpload} />\r\n            <button className=\"verify-btn\" onClick={handleVerify}>Verify</button>\r\n            {status && <p className=\"verification-status\">{status}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VerifyProof;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}