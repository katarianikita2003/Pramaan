{"ast":null,"code":"var _jsxFileName = \"D:\\\\pramaan\\\\verifier_deployment\\\\pramaan-dapp\\\\src\\\\components\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [userId, setUserId] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [userDID, setUserDID] = useState(null);\n  useEffect(() => {\n    // Check if user already has a DID\n    checkRegistrationStatus();\n  }, []);\n  const checkRegistrationStatus = async () => {\n    const email = localStorage.getItem(\"userEmail\");\n    if (!email) return;\n    try {\n      const response = await fetch(\"http://localhost:5000/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.did) {\n          setUserDID(data.did);\n          setMessage(\"You are already registered!\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error checking registration:\", error);\n    }\n  };\n  const handleRegister = async e => {\n    e.preventDefault();\n    if (!userId.trim()) {\n      setError(\"Employee/Biometric ID is required\");\n      return;\n    }\n    setError(\"\");\n    setIsLoading(true);\n    const email = localStorage.getItem(\"userEmail\");\n    if (!email) {\n      setError(\"Please login first\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5000/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          userId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.error || \"Registration failed\");\n        return;\n      }\n      setMessage(data.message);\n      setUserDID(data.did);\n      setUserId(\"\");\n    } catch (error) {\n      setError(\"Network error. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-container glass-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDD10 Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), userDID ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"success\",\n        children: \"\\u2705 You are registered!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"did-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Your DID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"did-value\",\n          children: userDID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"info-text\",\n        children: \"You can now use the Authenticate feature to generate Zero-Knowledge Proofs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleRegister,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"register-info\",\n        children: \"Register your Employee ID or Biometric ID to create a unique DID (Decentralized Identifier).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Employee/Biometric ID\",\n        value: userId,\n        onChange: e => {\n          setUserId(e.target.value);\n          setError(\"\");\n        },\n        className: \"register-input\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 31\n      }, this), message && !userDID && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 45\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"register-btn\",\n        disabled: isLoading,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 38\n        }, this) : \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"Tqocqp61XrPVR4lUhrXFPng0dfA=\");\n_c = Register;\nexport default Register;\n\n// import React, { useState } from \"react\";\n\n// const Register = () => {\n//     const [userId, setUserId] = useState(\"\");\n//     const [successMessage, setSuccessMessage] = useState(\"\");\n//     const [errorMessage, setErrorMessage] = useState(\"\");\n\n//     const handleRegister = async () => {\n//         setSuccessMessage(\"\");\n//         setErrorMessage(\"\");\n\n//         if (!userId) {\n//             setErrorMessage(\"⚠️ Please enter a valid Employee/Biometric ID.\");\n//             return;\n//         }\n\n//         try {\n//             const response = await fetch(\"http://localhost:5000/api/register\", {\n//                 method: \"POST\",\n//                 headers: { \"Content-Type\": \"application/json\" },\n//                 body: JSON.stringify({ userId }),\n//             });\n\n//             const data = await response.json();\n\n//             if (response.ok) {\n//                 setSuccessMessage(\"✅ Successfully Registered!\");\n//                 setUserId(\"\"); // Clear input field\n//             } else {\n//                 setErrorMessage(`⚠️ ${data.error || \"Registration failed.\"}`);\n//             }\n//         } catch (error) {\n//             console.error(\"Registration Error:\", error);\n//             setErrorMessage(\"⚠️ Server error. Please try again.\");\n//         }\n//     };\n\n//     return (\n//         <div className=\"register-container\">\n//             <h2>Register</h2>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Enter Employee/Biometric ID\"\n//                 value={userId}\n//                 onChange={(e) => setUserId(e.target.value)}\n//                 required\n//             />\n//             <button className=\"register-btn\" onClick={handleRegister}>Register</button>\n\n//             {successMessage && <p className=\"success-message\">{successMessage}</p>}\n//             {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//         </div>\n//     );\n// };\n\n// export default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Register","_s","userId","setUserId","message","setMessage","error","setError","isLoading","setIsLoading","userDID","setUserDID","checkRegistrationStatus","email","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","ok","data","json","did","console","handleRegister","e","preventDefault","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","disabled","_c","$RefreshReg$"],"sources":["D:/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/App.css\";\r\n\r\nconst Register = () => {\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [userDID, setUserDID] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Check if user already has a DID\r\n        checkRegistrationStatus();\r\n    }, []);\r\n\r\n    const checkRegistrationStatus = async () => {\r\n        const email = localStorage.getItem(\"userEmail\");\r\n        if (!email) return;\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/register\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ email }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                if (data.did) {\r\n                    setUserDID(data.did);\r\n                    setMessage(\"You are already registered!\");\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error checking registration:\", error);\r\n        }\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!userId.trim()) {\r\n            setError(\"Employee/Biometric ID is required\");\r\n            return;\r\n        }\r\n\r\n        setError(\"\");\r\n        setIsLoading(true);\r\n\r\n        const email = localStorage.getItem(\"userEmail\");\r\n        if (!email) {\r\n            setError(\"Please login first\");\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/register\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ email, userId }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setError(data.error || \"Registration failed\");\r\n                return;\r\n            }\r\n\r\n            setMessage(data.message);\r\n            setUserDID(data.did);\r\n            setUserId(\"\");\r\n        } catch (error) {\r\n            setError(\"Network error. Please try again.\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"register-container glass-card\">\r\n            <h2>🔐 Register</h2>\r\n            \r\n            {userDID ? (\r\n                <div className=\"success-section\">\r\n                    <p className=\"success\">✅ You are registered!</p>\r\n                    <div className=\"did-display\">\r\n                        <label>Your DID:</label>\r\n                        <div className=\"did-value\">{userDID}</div>\r\n                    </div>\r\n                    <p className=\"info-text\">\r\n                        You can now use the Authenticate feature to generate Zero-Knowledge Proofs.\r\n                    </p>\r\n                </div>\r\n            ) : (\r\n                <form onSubmit={handleRegister}>\r\n                    <p className=\"register-info\">\r\n                        Register your Employee ID or Biometric ID to create a unique DID (Decentralized Identifier).\r\n                    </p>\r\n                    \r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter Employee/Biometric ID\"\r\n                        value={userId}\r\n                        onChange={(e) => {\r\n                            setUserId(e.target.value);\r\n                            setError(\"\");\r\n                        }}\r\n                        className=\"register-input\"\r\n                        disabled={isLoading}\r\n                    />\r\n                    \r\n                    {error && <div className=\"error\">{error}</div>}\r\n                    {message && !userDID && <div className=\"success\">{message}</div>}\r\n                    \r\n                    <button type=\"submit\" className=\"register-btn\" disabled={isLoading}>\r\n                        {isLoading ? <span className=\"loading\"></span> : \"Register\"}\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n\r\n// import React, { useState } from \"react\";\r\n\r\n// const Register = () => {\r\n//     const [userId, setUserId] = useState(\"\");\r\n//     const [successMessage, setSuccessMessage] = useState(\"\");\r\n//     const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n//     const handleRegister = async () => {\r\n//         setSuccessMessage(\"\");\r\n//         setErrorMessage(\"\");\r\n\r\n//         if (!userId) {\r\n//             setErrorMessage(\"⚠️ Please enter a valid Employee/Biometric ID.\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             const response = await fetch(\"http://localhost:5000/api/register\", {\r\n//                 method: \"POST\",\r\n//                 headers: { \"Content-Type\": \"application/json\" },\r\n//                 body: JSON.stringify({ userId }),\r\n//             });\r\n\r\n//             const data = await response.json();\r\n\r\n//             if (response.ok) {\r\n//                 setSuccessMessage(\"✅ Successfully Registered!\");\r\n//                 setUserId(\"\"); // Clear input field\r\n//             } else {\r\n//                 setErrorMessage(`⚠️ ${data.error || \"Registration failed.\"}`);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Registration Error:\", error);\r\n//             setErrorMessage(\"⚠️ Server error. Please try again.\");\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"register-container\">\r\n//             <h2>Register</h2>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Enter Employee/Biometric ID\"\r\n//                 value={userId}\r\n//                 onChange={(e) => setUserId(e.target.value)}\r\n//                 required\r\n//             />\r\n//             <button className=\"register-btn\" onClick={handleRegister}>Register</button>\r\n\r\n//             {successMessage && <p className=\"success-message\">{successMessage}</p>}\r\n//             {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}