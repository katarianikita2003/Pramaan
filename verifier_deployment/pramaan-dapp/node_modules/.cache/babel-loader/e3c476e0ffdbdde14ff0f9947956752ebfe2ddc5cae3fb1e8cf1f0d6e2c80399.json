{"ast":null,"code":"import { BrowserProvider, Contract, toBigInt } from \"ethers\";\nimport verifierABI from \"../contract/Verifier.json\";\nexport const generateProof = async userId => {\n  // Simulated proof generation (Replace with actual ZoKrates proof)\n  return {\n    proof: {\n      a: [\"0x1\", \"0x2\"],\n      b: [[\"0x3\", \"0x4\"], [\"0x5\", \"0x6\"]],\n      c: [\"0x7\", \"0x8\"]\n    },\n    inputs: [userId]\n  };\n};\nexport const verifyProofOnChain = async proof => {\n  if (!window.ethereum) {\n    alert(\"MetaMask is required!\");\n    return false;\n  }\n  await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  const provider = new BrowserProvider(window.ethereum);\n  const signer = await provider.getSigner();\n  const contract = new Contract(process.env.REACT_APP_CONTRACT_ADDRESS, verifierABI, signer);\n  const {\n    proof: {\n      a,\n      b,\n      c\n    },\n    inputs\n  } = proof;\n  const formattedProof = {\n    a: [toBigInt(a[0]), toBigInt(a[1])],\n    b: [[toBigInt(b[0][0]), toBigInt(b[0][1])], [toBigInt(b[1][0]), toBigInt(b[1][1])]],\n    c: [toBigInt(c[0]), toBigInt(c[1])]\n  };\n  const formattedInputs = inputs.map(i => toBigInt(i));\n  return await contract.verifyTx(formattedProof, formattedInputs);\n};","map":{"version":3,"names":["BrowserProvider","Contract","toBigInt","verifierABI","generateProof","userId","proof","a","b","c","inputs","verifyProofOnChain","window","ethereum","alert","request","method","provider","signer","getSigner","contract","process","env","REACT_APP_CONTRACT_ADDRESS","formattedProof","formattedInputs","map","i","verifyTx"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/utils/generateProof.js"],"sourcesContent":["import { BrowserProvider, Contract, toBigInt } from \"ethers\";\r\nimport verifierABI from \"../contract/Verifier.json\";\r\n\r\nexport const generateProof = async (userId) => {\r\n    // Simulated proof generation (Replace with actual ZoKrates proof)\r\n    return {\r\n        proof: {\r\n            a: [\"0x1\", \"0x2\"],\r\n            b: [[\"0x3\", \"0x4\"], [\"0x5\", \"0x6\"]],\r\n            c: [\"0x7\", \"0x8\"]\r\n        },\r\n        inputs: [userId]\r\n    };\r\n};\r\n\r\nexport const verifyProofOnChain = async (proof) => {\r\n    if (!window.ethereum) {\r\n        alert(\"MetaMask is required!\");\r\n        return false;\r\n    }\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n    const provider = new BrowserProvider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n    const contract = new Contract(process.env.REACT_APP_CONTRACT_ADDRESS, verifierABI, signer);\r\n\r\n    const { proof: { a, b, c }, inputs } = proof;\r\n    const formattedProof = {\r\n        a: [toBigInt(a[0]), toBigInt(a[1])],\r\n        b: [\r\n            [toBigInt(b[0][0]), toBigInt(b[0][1])],\r\n            [toBigInt(b[1][0]), toBigInt(b[1][1])]\r\n        ],\r\n        c: [toBigInt(c[0]), toBigInt(c[1])]\r\n    };\r\n    const formattedInputs = inputs.map((i) => toBigInt(i));\r\n\r\n    return await contract.verifyTx(formattedProof, formattedInputs);\r\n};\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,QAAQ;AAC5D,OAAOC,WAAW,MAAM,2BAA2B;AAEnD,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC3C;EACA,OAAO;IACHC,KAAK,EAAE;MACHC,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;MACjBC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;MACnCC,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK;IACpB,CAAC;IACDC,MAAM,EAAE,CAACL,MAAM;EACnB,CAAC;AACL,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAG,MAAOL,KAAK,IAAK;EAC/C,IAAI,CAACM,MAAM,CAACC,QAAQ,EAAE;IAClBC,KAAK,CAAC,uBAAuB,CAAC;IAC9B,OAAO,KAAK;EAChB;EACA,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAsB,CAAC,CAAC;EAEhE,MAAMC,QAAQ,GAAG,IAAIjB,eAAe,CAACY,MAAM,CAACC,QAAQ,CAAC;EACrD,MAAMK,MAAM,GAAG,MAAMD,QAAQ,CAACE,SAAS,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAG,IAAInB,QAAQ,CAACoB,OAAO,CAACC,GAAG,CAACC,0BAA0B,EAAEpB,WAAW,EAAEe,MAAM,CAAC;EAE1F,MAAM;IAAEZ,KAAK,EAAE;MAAEC,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC;IAAEC;EAAO,CAAC,GAAGJ,KAAK;EAC5C,MAAMkB,cAAc,GAAG;IACnBjB,CAAC,EAAE,CAACL,QAAQ,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEL,QAAQ,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnCC,CAAC,EAAE,CACC,CAACN,QAAQ,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEN,QAAQ,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACtC,CAACN,QAAQ,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEN,QAAQ,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzC;IACDC,CAAC,EAAE,CAACP,QAAQ,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEP,QAAQ,CAACO,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;EACD,MAAMgB,eAAe,GAAGf,MAAM,CAACgB,GAAG,CAAEC,CAAC,IAAKzB,QAAQ,CAACyB,CAAC,CAAC,CAAC;EAEtD,OAAO,MAAMP,QAAQ,CAACQ,QAAQ,CAACJ,cAAc,EAAEC,eAAe,CAAC;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}