{"ast":null,"code":"var _jsxFileName = \"/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { JsonRpcProvider, Contract, toBigInt } from \"ethers\";\nimport verifierABI from \"../contract/VerifierABI.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerifyProof = ({\n  proof\n}) => {\n  _s();\n  const [result, setResult] = useState(null);\n  const verifyProofOnChain = async () => {\n    if (!proof) {\n      alert(\"Please upload a proof file first.\");\n      return;\n    }\n    try {\n      // Connect to user's MetaMask\n      if (!window.ethereum) {\n        alert(\"MetaMask is required!\");\n        return;\n      }\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const provider = new JsonRpcProvider(window.ethereum);\n      const signer = provider.getSigner();\n\n      // Load the deployed Verifier contract\n      const contract = new Contract(process.env.REACT_APP_CONTRACT_ADDRESS, verifierABI, signer);\n\n      // Extract proof elements\n      const {\n        proof: {\n          a,\n          b,\n          c\n        },\n        inputs\n      } = proof;\n\n      // Format the proof for Solidity\n      const formattedProof = {\n        a: [toBigInt(a[0]), toBigInt(a[1])],\n        b: [[toBigInt(b[0][0]), toBigInt(b[0][1])], [toBigInt(b[1][0]), toBigInt(b[1][1])]],\n        c: [toBigInt(c[0]), toBigInt(c[1])]\n      };\n      const formattedInputs = inputs.map(i => toBigInt(i));\n\n      // Call the `verifyTx` function\n      const isValid = await contract.verifyTx(formattedProof, formattedInputs);\n      setResult(isValid ? \"✅ Proof is valid!\" : \"❌ Proof verification failed!\");\n    } catch (error) {\n      console.error(error);\n      setResult(\"⚠️ Error occurred during verification.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: verifyProofOnChain,\n      children: \"Verify Proof\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(VerifyProof, \"X4bz0btR6WTE+CkTerVmRyY/5iQ=\");\n_c = VerifyProof;\nexport default VerifyProof;\nvar _c;\n$RefreshReg$(_c, \"VerifyProof\");","map":{"version":3,"names":["React","useState","JsonRpcProvider","Contract","toBigInt","verifierABI","jsxDEV","_jsxDEV","VerifyProof","proof","_s","result","setResult","verifyProofOnChain","alert","window","ethereum","request","method","provider","signer","getSigner","contract","process","env","REACT_APP_CONTRACT_ADDRESS","a","b","c","inputs","formattedProof","formattedInputs","map","i","isValid","verifyTx","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { JsonRpcProvider, Contract, toBigInt } from \"ethers\";\r\nimport verifierABI from \"../contract/VerifierABI.json\";\r\n\r\nconst VerifyProof = ({ proof }) => {\r\n    const [result, setResult] = useState(null);\r\n\r\n    const verifyProofOnChain = async () => {\r\n        if (!proof) {\r\n            alert(\"Please upload a proof file first.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Connect to user's MetaMask\r\n            if (!window.ethereum) {\r\n                alert(\"MetaMask is required!\");\r\n                return;\r\n            }\r\n            await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n            const provider = new JsonRpcProvider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n\r\n            // Load the deployed Verifier contract\r\n            const contract = new Contract(\r\n                process.env.REACT_APP_CONTRACT_ADDRESS,\r\n                verifierABI,\r\n                signer\r\n            );\r\n\r\n            // Extract proof elements\r\n            const { proof: { a, b, c }, inputs } = proof;\r\n\r\n            // Format the proof for Solidity\r\n            const formattedProof = {\r\n                a: [toBigInt(a[0]), toBigInt(a[1])],\r\n                b: [\r\n                    [toBigInt(b[0][0]), toBigInt(b[0][1])],\r\n                    [toBigInt(b[1][0]), toBigInt(b[1][1])]\r\n                ],\r\n                c: [toBigInt(c[0]), toBigInt(c[1])]\r\n            };\r\n\r\n            const formattedInputs = inputs.map((i) => toBigInt(i));\r\n\r\n            // Call the `verifyTx` function\r\n            const isValid = await contract.verifyTx(formattedProof, formattedInputs);\r\n            \r\n            setResult(isValid ? \"✅ Proof is valid!\" : \"❌ Proof verification failed!\");\r\n        } catch (error) {\r\n            console.error(error);\r\n            setResult(\"⚠️ Error occurred during verification.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={verifyProofOnChain}>Verify Proof</button>\r\n            {result && <h3>{result}</h3>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VerifyProof;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}