{"ast":null,"code":"var _jsxFileName = \"D:\\\\Pramaan - ZKP\\\\Pramaan\\\\verifier_deployment\\\\pramaan-dapp\\\\src\\\\components\\\\VerifyProof.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerifyProof = () => {\n  _s();\n  const [proof, setProof] = useState(null);\n  const [status, setStatus] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [fileName, setFileName] = useState(\"\");\n\n  // Handles proof.json file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    if (!file.name.endsWith('.json')) {\n      setError(\"Please upload a .json file\");\n      return;\n    }\n    setFileName(file.name);\n    const reader = new FileReader();\n    reader.onload = e => {\n      try {\n        const jsonProof = JSON.parse(e.target.result);\n\n        // Validate if proof contains required fields\n        if (!jsonProof.proof || !jsonProof.inputs) {\n          throw new Error(\"Invalid proof file: Missing required fields\");\n        }\n        setProof(jsonProof);\n        setError(\"\");\n        setStatus(\"\");\n      } catch (error) {\n        setError(\"Invalid JSON file: \" + error.message);\n        setProof(null);\n        setFileName(\"\");\n      }\n    };\n    reader.onerror = () => {\n      setError(\"Error reading file\");\n      setFileName(\"\");\n    };\n    reader.readAsText(file);\n  };\n\n  // Handles Proof Verification\n  const handleVerify = async () => {\n    const email = localStorage.getItem(\"userEmail\");\n    if (!email) {\n      setError(\"User not logged in! Please login first.\");\n      return;\n    }\n    if (!proof) {\n      setError(\"Please upload a valid proof.json file.\");\n      return;\n    }\n    setIsLoading(true);\n    setError(\"\");\n    setStatus(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5000/api/verify\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          proof,\n          email\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || \"Verification Failed\");\n      }\n      setStatus(data.success ? \"‚úÖ Authentication Success!\" : \"‚ùå Authentication Failed!\");\n    } catch (error) {\n      setError(`Verification Failed: ${error.message}`);\n      setStatus(\"\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleReset = () => {\n    setProof(null);\n    setStatus(\"\");\n    setError(\"\");\n    setFileName(\"\");\n    // Reset file input\n    const fileInput = document.getElementById('file-input');\n    if (fileInput) fileInput.value = '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"verify-proof-container glass-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDD0D Verify Proof\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"verify-info\",\n      children: \"Upload a proof.json file to verify your Zero-Knowledge Proof authentication.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-input\",\n        accept: \".json\",\n        onChange: handleFileUpload,\n        className: \"file-input\",\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-input\",\n        className: \"file-upload-label\",\n        children: fileName ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-selected\",\n          children: [\"\\uD83D\\uDCC4 \", fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-prompt\",\n          children: \"\\uD83D\\uDCC1 Choose proof.json file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), proof && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"proof-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"preview-title\",\n        children: \"Proof loaded successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        className: \"reset-btn\",\n        children: \"Change File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 23\n    }, this), status && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: status.includes(\"Success\") ? \"success\" : \"error\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"verify-btn\",\n      onClick: handleVerify,\n      disabled: isLoading || !proof,\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 30\n      }, this) : \"Verify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(VerifyProof, \"rtcBs0TqFs+4/PMHttTbb9iGmK8=\");\n_c = VerifyProof;\nexport default VerifyProof;\n\n// import React, { useState } from \"react\";\n\n// const VerifyProof = () => {\n//     const [proof, setProof] = useState(null);\n//     const [status, setStatus] = useState(\"\");\n//     const [error, setError] = useState(\"\");\n\n//     // Handles proof.json file upload\n//     const handleFileUpload = (event) => {\n//         const file = event.target.files[0];\n//         const reader = new FileReader();\n\n//         reader.onload = (e) => {\n//             try {\n//                 const jsonProof = JSON.parse(e.target.result);\n\n//                 // Validate if proof contains \"inputs\"\n//                 if (!jsonProof.inputs || !Array.isArray(jsonProof.inputs) || jsonProof.inputs.length === 0) {\n//                     throw new Error(\"Invalid proof file: Missing inputs\");\n//                 }\n\n//                 setProof(jsonProof);\n//                 setError(\"\");\n//             } catch (error) {\n//                 setError(\"‚ùå Invalid JSON file: \" + error.message);\n//                 setProof(null);\n//             }\n//         };\n//         reader.readAsText(file);\n//     };\n\n//     // Handles Proof Verification on the backend\n//     const handleVerify = async () => {\n//         const email = localStorage.getItem(\"userEmail\");\n\n//         if (!email) {\n//             setError(\"‚ùå User not logged in! Please login first.\");\n//             return;\n//         }\n\n//         if (!proof) {\n//             setError(\"‚ùå Please upload a valid proof.json file.\");\n//             return;\n//         }\n\n//         try {\n//             console.log(`üì§ Sending verification request for User: ${email}`);\n\n//             const response = await fetch(\"http://localhost:5000/api/verify\", {\n//                 method: \"POST\",\n//                 headers: { \"Content-Type\": \"application/json\" },\n//                 body: JSON.stringify({ proof, email }),\n//             });\n\n//             if (!response.ok) {\n//                 const errorData = await response.json();\n//                 throw new Error(errorData.error || \"Verification Failed\");\n//             }\n\n//             const data = await response.json();\n//             setStatus(data.success ? \"‚úÖ Authentication Success!\" : \"‚ùå Authentication Failed!\");\n//             setError(\"\");\n//         } catch (error) {\n//             console.error(\"‚ùå Error during verification:\", error);\n//             setStatus(\"\");\n//             setError(`‚ùå Verification Failed: ${error.message}`);\n//         }\n//     };\n\n//     return (\n//         <div className=\"verify-proof-container\">\n//             <h2>Verify Proof</h2>\n//             <input type=\"file\" accept=\".json\" onChange={handleFileUpload} />\n//             <button className=\"verify-btn\" onClick={handleVerify}>Verify</button>\n//             {error && <p className=\"error-message\">{error}</p>}\n//             {status && <p className=\"verification-status\">{status}</p>}\n//         </div>\n//     );\n// };\n\n// export default VerifyProof;\nvar _c;\n$RefreshReg$(_c, \"VerifyProof\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","VerifyProof","_s","proof","setProof","status","setStatus","error","setError","isLoading","setIsLoading","fileName","setFileName","handleFileUpload","event","file","target","files","name","endsWith","reader","FileReader","onload","e","jsonProof","JSON","parse","result","inputs","Error","message","onerror","readAsText","handleVerify","email","localStorage","getItem","response","fetch","method","headers","body","stringify","data","json","ok","success","handleReset","fileInput","document","getElementById","value","className","children","_jsxFileName","lineNumber","columnNumber","type","id","accept","onChange","disabled","htmlFor","onClick","includes","_c","$RefreshReg$"],"sources":["D:/Pramaan - ZKP/Pramaan/verifier_deployment/pramaan-dapp/src/components/VerifyProof.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/App.css\";\r\n\r\nconst VerifyProof = () => {\r\n    const [proof, setProof] = useState(null);\r\n    const [status, setStatus] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [fileName, setFileName] = useState(\"\");\r\n\r\n    // Handles proof.json file upload\r\n    const handleFileUpload = (event) => {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n\r\n        if (!file.name.endsWith('.json')) {\r\n            setError(\"Please upload a .json file\");\r\n            return;\r\n        }\r\n\r\n        setFileName(file.name);\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            try {\r\n                const jsonProof = JSON.parse(e.target.result);\r\n\r\n                // Validate if proof contains required fields\r\n                if (!jsonProof.proof || !jsonProof.inputs) {\r\n                    throw new Error(\"Invalid proof file: Missing required fields\");\r\n                }\r\n\r\n                setProof(jsonProof);\r\n                setError(\"\");\r\n                setStatus(\"\");\r\n            } catch (error) {\r\n                setError(\"Invalid JSON file: \" + error.message);\r\n                setProof(null);\r\n                setFileName(\"\");\r\n            }\r\n        };\r\n\r\n        reader.onerror = () => {\r\n            setError(\"Error reading file\");\r\n            setFileName(\"\");\r\n        };\r\n\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    // Handles Proof Verification\r\n    const handleVerify = async () => {\r\n        const email = localStorage.getItem(\"userEmail\");\r\n\r\n        if (!email) {\r\n            setError(\"User not logged in! Please login first.\");\r\n            return;\r\n        }\r\n\r\n        if (!proof) {\r\n            setError(\"Please upload a valid proof.json file.\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(\"\");\r\n        setStatus(\"\");\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/verify\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ proof, email }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || \"Verification Failed\");\r\n            }\r\n\r\n            setStatus(data.success ? \"‚úÖ Authentication Success!\" : \"‚ùå Authentication Failed!\");\r\n        } catch (error) {\r\n            setError(`Verification Failed: ${error.message}`);\r\n            setStatus(\"\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setProof(null);\r\n        setStatus(\"\");\r\n        setError(\"\");\r\n        setFileName(\"\");\r\n        // Reset file input\r\n        const fileInput = document.getElementById('file-input');\r\n        if (fileInput) fileInput.value = '';\r\n    };\r\n\r\n    return (\r\n        <div className=\"verify-proof-container glass-card\">\r\n            <h2>üîç Verify Proof</h2>\r\n            \r\n            <p className=\"verify-info\">\r\n                Upload a proof.json file to verify your Zero-Knowledge Proof authentication.\r\n            </p>\r\n\r\n            <div className=\"file-upload-section\">\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"file-input\"\r\n                    accept=\".json\"\r\n                    onChange={handleFileUpload}\r\n                    className=\"file-input\"\r\n                    disabled={isLoading}\r\n                />\r\n                <label htmlFor=\"file-input\" className=\"file-upload-label\">\r\n                    {fileName ? (\r\n                        <span className=\"file-selected\">\r\n                            üìÑ {fileName}\r\n                        </span>\r\n                    ) : (\r\n                        <span className=\"file-prompt\">\r\n                            üìÅ Choose proof.json file\r\n                        </span>\r\n                    )}\r\n                </label>\r\n            </div>\r\n\r\n            {proof && (\r\n                <div className=\"proof-preview\">\r\n                    <p className=\"preview-title\">Proof loaded successfully</p>\r\n                    <button onClick={handleReset} className=\"reset-btn\">\r\n                        Change File\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {error && <div className=\"error\">{error}</div>}\r\n            {status && <div className={status.includes(\"Success\") ? \"success\" : \"error\"}>{status}</div>}\r\n\r\n            <button \r\n                className=\"verify-btn\" \r\n                onClick={handleVerify}\r\n                disabled={isLoading || !proof}\r\n            >\r\n                {isLoading ? <span className=\"loading\"></span> : \"Verify\"}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VerifyProof;\r\n\r\n// import React, { useState } from \"react\";\r\n\r\n// const VerifyProof = () => {\r\n//     const [proof, setProof] = useState(null);\r\n//     const [status, setStatus] = useState(\"\");\r\n//     const [error, setError] = useState(\"\");\r\n\r\n//     // Handles proof.json file upload\r\n//     const handleFileUpload = (event) => {\r\n//         const file = event.target.files[0];\r\n//         const reader = new FileReader();\r\n\r\n//         reader.onload = (e) => {\r\n//             try {\r\n//                 const jsonProof = JSON.parse(e.target.result);\r\n\r\n//                 // Validate if proof contains \"inputs\"\r\n//                 if (!jsonProof.inputs || !Array.isArray(jsonProof.inputs) || jsonProof.inputs.length === 0) {\r\n//                     throw new Error(\"Invalid proof file: Missing inputs\");\r\n//                 }\r\n\r\n//                 setProof(jsonProof);\r\n//                 setError(\"\");\r\n//             } catch (error) {\r\n//                 setError(\"‚ùå Invalid JSON file: \" + error.message);\r\n//                 setProof(null);\r\n//             }\r\n//         };\r\n//         reader.readAsText(file);\r\n//     };\r\n\r\n//     // Handles Proof Verification on the backend\r\n//     const handleVerify = async () => {\r\n//         const email = localStorage.getItem(\"userEmail\");\r\n\r\n//         if (!email) {\r\n//             setError(\"‚ùå User not logged in! Please login first.\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!proof) {\r\n//             setError(\"‚ùå Please upload a valid proof.json file.\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             console.log(`üì§ Sending verification request for User: ${email}`);\r\n\r\n//             const response = await fetch(\"http://localhost:5000/api/verify\", {\r\n//                 method: \"POST\",\r\n//                 headers: { \"Content-Type\": \"application/json\" },\r\n//                 body: JSON.stringify({ proof, email }),\r\n//             });\r\n\r\n//             if (!response.ok) {\r\n//                 const errorData = await response.json();\r\n//                 throw new Error(errorData.error || \"Verification Failed\");\r\n//             }\r\n\r\n//             const data = await response.json();\r\n//             setStatus(data.success ? \"‚úÖ Authentication Success!\" : \"‚ùå Authentication Failed!\");\r\n//             setError(\"\");\r\n//         } catch (error) {\r\n//             console.error(\"‚ùå Error during verification:\", error);\r\n//             setStatus(\"\");\r\n//             setError(`‚ùå Verification Failed: ${error.message}`);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"verify-proof-container\">\r\n//             <h2>Verify Proof</h2>\r\n//             <input type=\"file\" accept=\".json\" onChange={handleFileUpload} />\r\n//             <button className=\"verify-btn\" onClick={handleVerify}>Verify</button>\r\n//             {error && <p className=\"error-message\">{error}</p>}\r\n//             {status && <p className=\"verification-status\">{status}</p>}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default VerifyProof;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}