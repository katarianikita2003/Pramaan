{"ast":null,"code":"var _jsxFileName = \"/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [employeeId, setEmployeeId] = useState(\"\");\n  const [biometricId, setBiometricId] = useState(\"\");\n  const navigate = useNavigate();\n  const handleRegister = async () => {\n    if (!employeeId || !biometricId) {\n      alert(\"Please enter all fields!\");\n      return;\n    }\n\n    // Hash Biometric ID (Placeholder for now)\n    const hashedBiometric = await sha256(biometricId);\n    const did = generateDID(hashedBiometric); // Generate DID\n\n    // Store (Employee ID -> DID) mapping\n    localStorage.setItem(employeeId, did);\n    alert(`Registration successful! Your DID: ${did}`);\n    navigate(\"/authenticate\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Registration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Employee ID\",\n      onChange: e => setEmployeeId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Biometric ID\",\n      onChange: e => setBiometricId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRegister,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to hash biometric ID\n_s(Register, \"2mKjjYeoJnvF0Z7GSRaH5HXnTD8=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nconst sha256 = async message => {\n  const msgBuffer = new TextEncoder().encode(message);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer);\n  return Array.from(new Uint8Array(hashBuffer)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n};\n\n// Function to generate a pseudo-random DID\nconst generateDID = hashedBiometric => `did:pramaan:${hashedBiometric.slice(0, 16)}`;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Register","_s","employeeId","setEmployeeId","biometricId","setBiometricId","navigate","handleRegister","alert","hashedBiometric","sha256","did","generateDID","localStorage","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","onClick","_c","message","msgBuffer","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","slice","$RefreshReg$"],"sources":["/mnt/d/pramaan/verifier_deployment/pramaan-dapp/src/components/Register.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Register = () => {\r\n    const [employeeId, setEmployeeId] = useState(\"\");\r\n    const [biometricId, setBiometricId] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const handleRegister = async () => {\r\n        if (!employeeId || !biometricId) {\r\n            alert(\"Please enter all fields!\");\r\n            return;\r\n        }\r\n\r\n        // Hash Biometric ID (Placeholder for now)\r\n        const hashedBiometric = await sha256(biometricId);\r\n        const did = generateDID(hashedBiometric); // Generate DID\r\n\r\n        // Store (Employee ID -> DID) mapping\r\n        localStorage.setItem(employeeId, did);\r\n        alert(`Registration successful! Your DID: ${did}`);\r\n\r\n        navigate(\"/authenticate\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Registration</h2>\r\n            <input type=\"text\" placeholder=\"Enter Employee ID\" onChange={(e) => setEmployeeId(e.target.value)} />\r\n            <input type=\"text\" placeholder=\"Enter Biometric ID\" onChange={(e) => setBiometricId(e.target.value)} />\r\n            <button onClick={handleRegister}>Register</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Function to hash biometric ID\r\nconst sha256 = async (message) => {\r\n    const msgBuffer = new TextEncoder().encode(message);\r\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer);\r\n    return Array.from(new Uint8Array(hashBuffer)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\r\n};\r\n\r\n// Function to generate a pseudo-random DID\r\nconst generateDID = (hashedBiometric) => `did:pramaan:${hashedBiometric.slice(0, 16)}`;\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}